;####################################################
; Generic program for moving any co-ordinate system
;####################################################
 
;This program defines the program needed to do a move using the motor record
;on a CS axis
;to do a move we need to do &{CS}R
;to stop a move we need to do &{CS}A
;demand values are in &{CS}Q71..79
;The following are set by the motor record:
;Isx87 = Acceleration
;Isx89 = Feedrate

; Set some defaults for all CS axes
i5213,15,100=10 ; segmentation time (needed for lookahead)
i5220,15,100=50 ; lookahead length (needed to limit max velocity to max in CS)
i5250,15,100=1  ; Enable kinematics

OPEN PROG 10
CLEAR
LINEAR
ABS
FRAX(A,B,C,U,V,W,X,Y,Z)
A(Q71)B(Q72)C(Q73)U(Q74)V(Q75)W(Q76)X(Q77)Y(Q78)Z(Q79)
DWELL0
CLOSE

;################################################
; Define motion for ADC slit horizontal blades
; Defined axes:
;   X (addr 6) = gap
;   Y (addr 7) = center
; 
; 
;################################################

; Preset some calibration parameters
P4806 = 1
P4906 = 0
P4807 = 1
P4907 = 0

&2
#6->I ; Inboard
#7->I ; Outboard 

; Define motor parameters
#define XI_MTR_MOVE P4706
#define XI_MTR_MRES P4806
#define XI_MTR_OFF  P4906
#define XO_MTR_MOVE P4707
#define XO_MTR_MRES P4807
#define XO_MTR_OFF  P4907

#define XI_MTR_POS (XI_MTR_MRES*P6+XI_MTR_OFF)
#define XO_MTR_POS (XO_MTR_MRES*P7+XO_MTR_OFF)

#define X_GAP Q7
#define X_CENTER Q8

OPEN FORWARD CLEAR
; Check home complete bits for each motor
IF (M645=1 AND M745=1)
  X_GAP = XO_MTR_POS - XI_MTR_POS
  X_CENTER = (XO_MTR_POS + XI_MTR_POS) / 2
ELSE
  ; Set run-time error bit
  M5282=1
ENDIF
CLOSE

#define XI_MTR_POS Q228
#define XO_MTR_POS Q229

&2   
OPEN INVERSE CLEAR
; Calculate in EGU
XI_MTR_POS = X_CENTER - X_GAP / 2
XO_MTR_POS = X_CENTER + X_GAP / 2

; Calculate in counts
P6 = (XI_MTR_POS - XI_MTR_OFF)/XI_MTR_MRES
P7 = (XO_MTR_POS - XO_MTR_OFF)/XO_MTR_MRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define XI_MTR_POS (XI_MTR_MRES*M662/(I608*32)+XI_MTR_OFF)
#define XO_MTR_POS (XO_MTR_MRES*M762/(I708*32)+XO_MTR_OFF)

#define X_GAP Q87
#define X_CENTER Q88

OPEN PLC16
CLEAR
ADDRESS&2

X_GAP = XO_MTR_POS - XI_MTR_POS
X_CENTER = (XO_MTR_POS + XI_MTR_POS) / 2

; If motor record did the last move, set demands = readbacks
if (XO_MTR_MOVE = 1)
or (XI_MTR_MOVE = 1)
 XO_MTR_MOVE = 0
 XI_MTR_MOVE = 0
 Q77 = Q87
 Q78 = Q88
endif
CLOSE

;################################################
; Define motion for ADC slit vertical blades
; Defined axes:
;   X (addr 6) = gap
;   Y (addr 7) = center
; 
; 
;################################################

; Preset some calibration parameters
P4805 = 1
P4905 = 0
P4804 = 1
P4904 = 0

&3
#5->I ; Bottom
#4->I ; Top 

; Define motor parameters
#define YB_MTR_MOVE P4705
#define YB_MTR_MRES P4805
#define YB_MTR_OFF  P4905
#define YT_MTR_MOVE P4704
#define YT_MTR_MRES P4804
#define YT_MTR_OFF  P4904

#define YB_MTR_POS (YB_MTR_MRES*P5+YB_MTR_OFF)
#define YT_MTR_POS (YT_MTR_MRES*P4+YT_MTR_OFF)

#define Y_GAP Q7
#define Y_CENTER Q8

OPEN FORWARD CLEAR
; Check home complete bits for each motor
IF (M545=1 AND M445=1)
  Y_GAP = YT_MTR_POS - YB_MTR_POS
  Y_CENTER = (YT_MTR_POS + YB_MTR_POS) / 2
ELSE
  ; Set run-time error bit
  M5382=1
ENDIF
CLOSE

#define YB_MTR_POS Q228
#define YT_MTR_POS Q229

&3   
OPEN INVERSE CLEAR
; Calculate in EGU
YB_MTR_POS = Y_CENTER - Y_GAP / 2
YT_MTR_POS = Y_CENTER + Y_GAP / 2

; Calculate in counts
P5 = (YB_MTR_POS - YB_MTR_OFF)/YB_MTR_MRES
P4 = (YT_MTR_POS - YT_MTR_OFF)/YT_MTR_MRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define YB_MTR_POS (YB_MTR_MRES*M562/(I508*32)+YB_MTR_OFF)
#define YT_MTR_POS (YT_MTR_MRES*M462/(I408*32)+YT_MTR_OFF)

#define Y_GAP Q87
#define Y_CENTER Q88

OPEN PLC17
CLEAR
ADDRESS&3

Y_GAP = YT_MTR_POS - YB_MTR_POS
Y_CENTER = (YT_MTR_POS + YB_MTR_POS) / 2

; If motor record did the last move, set demands = readbacks
if (YT_MTR_MOVE = 1)
or (YB_MTR_MOVE = 1)
 YT_MTR_MOVE = 0
 YB_MTR_MOVE = 0
 Q77 = Q87
 Q78 = Q88
endif
CLOSE

;################################################
; Define motion for M3-A Pitch and Avg horizontal translation
; Defined axes:
;   X (addr 6) = pitch
;   Y (addr 7) = avg_x
; 
; 
;################################################

&4
#1->I ; X1 downstream
#2->I ; X2 upstream

; Preset some calibration parameters
P4801 = 0.5   ; x1 has 50nm/cnt encoder, x2 has 100nm/cnt encoder
P4901 = 0
P4802 = 1
P4902 = 0

; Define motor parameters
#define X1_MTR_MOVE P4701
#define X1_MTR_MRES P4801
#define X1_MTR_OFF  P4901
#define X2_MTR_MOVE P4702
#define X2_MTR_MRES P4802
#define X2_MTR_OFF  P4902

#define X1_MTR_POS (X1_MTR_MRES*P1+X1_MTR_OFF)
#define X2_MTR_POS (X2_MTR_MRES*P2+X2_MTR_OFF)

#define PITCH Q7
#define XAVG  Q8

#define LEN   300 ; distance between x1 and x2, in mm

OPEN FORWARD CLEAR
; Check home complete bits for each motor
IF (M145=1 AND M245=1)
  PITCH = (X1_MTR_POS - X2_MTR_POS) / LEN
  XAVG = (X1_MTR_POS + X2_MTR_POS) / 2
ELSE
  ; Set run-time error bit
  M5482=1
ENDIF
CLOSE

#define X1_MTR_POS Q228
#define X2_MTR_POS Q229

&4   
OPEN INVERSE CLEAR
; Calculate in EGU
X1_MTR_POS = (PITCH*LEN)/2 + XAVG
X2_MTR_POS = XAVG - (PITCH*LEN)/2 

; Calculate in counts
P1 = (X1_MTR_POS - X1_MTR_OFF)/X1_MTR_MRES
P2 = (X2_MTR_POS - X2_MTR_OFF)/X2_MTR_MRES
CLOSE

; A PLC(sx+15) needs to be made to do position reporting
; Readbacks should be in &{axisnum}Q81..89
; As forward kinematic, but with Px = mx62/(Ix08*32)
#define X1_MTR_POS (X1_MTR_MRES*M162/(I108*32)+X1_MTR_OFF)
#define X2_MTR_POS (X2_MTR_MRES*M262/(I208*32)+X2_MTR_OFF)

#define PITCH Q87
#define XAVG  Q88

OPEN PLC18
CLEAR
ADDRESS&4

PITCH = (X1_MTR_POS - X2_MTR_POS)/LEN
XAVG  = (X1_MTR_POS + X2_MTR_POS) / 2

 ; If motor record did the last move, set demands = readbacks
if (X2_MTR_MOVE = 1)
or (X1_MTR_MOVE = 1)
 X2_MTR_MOVE = 0
 X1_MTR_MOVE = 0
 Q77 = Q87
 Q78 = Q88
endif
CLOSE
